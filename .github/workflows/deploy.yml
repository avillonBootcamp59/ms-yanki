name: Build

on:
  push:
    branches:
      - master

jobs:
  build:
    name: Build and analyze
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu' # Alternative distribution options are available.
      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build and analyze

        run: |
          mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
            -Dsonar.host.url="https://sonarcloud.io" \
            -Dsonar.organization=avillonbootcamp59 \
            -Dsonar.projectKey=avillonBootcamp59_ms-yanki \
            -Dsonar.branch.name=master \
            -Dsonar.token=${{ secrets.SONAR_TOKEN }}

  deploy:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: build  # Asegurar que la compilación se realice antes del despliegue

    steps:
      - uses: actions/checkout@v4

      # Usar Java 17 para construir el .jar antes de Docker
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'

      - name: Build JAR with Maven
        run: mvn clean package -DskipTests

      # Iniciar sesión en Docker Hub
      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      # Construir y etiquetar la imagen Docker
      - name: Build and Tag Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/ms-yanki:latest .
          docker tag ${{ secrets.DOCKER_USERNAME }}/ms-yanki:latest ${{ secrets.DOCKER_USERNAME }}/ms-yanki:${{ github.run_number }}

      # Subir la imagen a Docker Hub
      - name: Push Docker Image
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/ms-yanki:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/ms-yanki:${{ github.run_number }}

      # Cerrar sesión en Docker Hub
      - name: Logout from Docker Hub
        run: docker logout